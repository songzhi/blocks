{"version":3,"sources":["base/scene.ts","base/game.ts","base/utils.ts","base/drawable.ts","main/drawable.ts","main/scene.ts","index.ts"],"names":[],"mappings":"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","file":"src.b454f6d9.js","sourceRoot":"../src","sourcesContent":["import Game from './game'\nimport Drawable from './drawable'\n\nexport default abstract class Scene {\n  game: Game\n  drawables: { [key: string]: Drawable } = {}\n  // 初始化资源,比如添加drawable\n  abstract init(): void\n  // 每更新一帧的时候被调用,但是这里应该写数据更新的操作\n  abstract update(): void\n  // 绘制一帧\n  draw(): void {\n    for (let uid of Object.keys(this.drawables)) {\n      this.drawables[uid].draw()\n    }\n  }\n  addDrawable(drawable: Drawable, ...others: Drawable[]): void {\n    drawable.game = this.game\n    drawable.scene = this\n    this.drawables[drawable.uid] = drawable\n    for (let d of others) {\n      this.drawables[d.uid] = d\n    }\n  }\n  removeDrawable(uid: string): void {\n    delete this.drawables[uid]\n  }\n}\n\nexport class LoadingScene extends Scene {\n  init() {}\n  update() {}\n  draw() {\n    const font = this.game.ctx.font\n    this.game.ctx.font = '36px serif'\n    this.game.ctx.fillText('资源加载中', 360, 280)\n    this.game.ctx.font = font\n  }\n}\n","import Scene, { LoadingScene } from './scene'\n\nexport interface GameOptions {\n  fps?: number // 默认30\n  images?: { [key: string]: string }\n  mainScene?: Scene\n  canvas?: HTMLCanvasElement // 默认为'#main-canvas'元素\n}\n\nexport default class Game {\n  fps: number\n  images: { [key: string]: HTMLImageElement }\n  scene: Scene\n  ctx: CanvasRenderingContext2D\n  canvas: HTMLCanvasElement\n  keydowns: { [key: string]: boolean }\n  actions: { [key: string]: () => void }\n  mainScene: Scene\n  paused: boolean = false\n  constructor(options: GameOptions) {\n    this.fps = options.fps ?? 30\n    this.images = {}\n\n    this.replaceScene(new LoadingScene())\n    this.mainScene = options.mainScene ?? this.scene\n\n    this.canvas = options.canvas ?? <HTMLCanvasElement>document.getElementById('main-canvas')\n    this.ctx = this.canvas.getContext('2d')\n\n    this.keydowns = {}\n    this.actions = {}\n    window.addEventListener('keydown', event => {\n      if (event.key === 'p') {\n        this.paused = !this.paused\n        return\n      }\n      this.keydowns[event.key] = true\n    })\n    window.addEventListener('keyup', event => {\n      this.keydowns[event.key] = false\n    })\n    this.init(options)\n  }\n  init(options: GameOptions) {\n    if (options.images) {\n      // 预载所有图片\n      for (let name of Object.keys(options.images)) {\n        let image = new Image()\n        image.src = options.images[name]\n        image.onload = () => {\n          this.images[name] = image\n          if (\n            Object.keys(this.images).length ===\n            Object.keys(options.images).length\n          ) {\n            this.replaceScene(this.mainScene)\n            this.runLoop()\n          }\n        }\n      }\n    } else {\n      this.replaceScene(this.mainScene)\n      this.runLoop()\n    }\n  }\n\n  update() {\n    this.scene.update()\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  draw() {\n    this.scene.draw()\n  }\n  registerAction(key: string, action: () => void): void {\n    this.actions[key] = action\n  }\n  runLoop() {\n    if (!this.paused) {\n      for (let key of Object.keys(this.actions)) {\n        if (this.keydowns[key]) {\n          // 如果按键被按下, 调用注册的 action\n          this.actions[key]()\n        }\n      }\n      this.update()\n      this.clear()\n      this.draw()\n    }\n    setTimeout(() => {\n      this.runLoop()\n    }, 1000 / this.fps)\n  }\n  replaceScene(scene: Scene) {\n    scene.game = this\n    scene.init()\n    this.scene = scene\n  }\n}\n","export function Uid(len?: number): string {\n  len = len || 7\n  return Math.random()\n    .toString(35)\n    .substr(2, len)\n}\n","import Game from './game'\nimport { Uid } from './utils'\nimport Scene from './scene'\n\nexport default abstract class Drawable {\n  game: Game\n  scene: Scene\n  x: number\n  y: number\n  uid: string\n  constructor(scene: Scene, x: number, y: number) {\n    this.uid = Uid()\n    this.x = x\n    this.y = y\n    this.scene = scene\n    this.game = scene.game\n  }\n  abstract draw(): void\n}\n\nexport class ImageDrawable extends Drawable {\n  image: HTMLImageElement\n  w: number\n  h: number\n  constructor(scene: Scene, x: number, y: number, image: HTMLImageElement) {\n    super(scene, x, y)\n    this.image = image\n    this.w = image.width\n    this.h = image.height\n  }\n  draw() {\n    this.game.ctx.drawImage(this.image, this.x, this.y)\n  }\n  isCollidedWith(other: ImageDrawable): boolean {\n    const [x1, y1, w1, h1] = [this.x, this.y, this.w, this.h]\n    const [x2, y2, w2, h2] = [other.x, other.y, other.w, other.h]\n    return !(\n      (x1 >= x2 && x1 >= x2 + w2) ||\n      (x1 <= x2 && x1 + w1 <= x2) ||\n      (y1 >= y2 && y1 >= y2 + h2) ||\n      (y1 <= y2 && y1 + h1 <= y2)\n    )\n  }\n}\n","import { ImageDrawable } from '../base/drawable'\n\nexport class Block extends ImageDrawable {}\n\nexport class Paddle extends ImageDrawable {\n  speed: number = 15\n  move(delta: number): void {\n    let x = this.x + delta\n    if (x < 0) x = 0\n    if (x > this.game.canvas.width - this.w) x = this.game.canvas.width - this.w\n    this.x = x\n  }\n  moveLeft(): void {\n    this.move(-this.speed)\n  }\n  moveRight(): void {\n    this.move(this.speed)\n  }\n}\n\nexport class Ball extends ImageDrawable {\n  speedX: number = 5\n  speedY: number = 5\n  fired: boolean = false\n  move() {\n    if (this.fired) {\n      const o = this\n      if (o.x < 0 || o.x > o.game.canvas.width - o.w) {\n        o.speedX = -o.speedX\n      }\n      if (o.y < 0 || o.y > o.game.canvas.height - o.h) {\n        o.speedY = -o.speedY\n      }\n      o.x += o.speedX\n      o.y += o.speedY\n    }\n  }\n  fire() {\n    this.fired = true\n  }\n}\n","import Scene from '../base/scene'\nimport Drawable, { ImageDrawable } from '../base/drawable'\nimport { Block, Paddle, Ball } from './drawable'\n\nexport default class MainScene extends Scene {\n  block: Block\n  paddle: Paddle\n  ball: Ball\n\n  init() {\n    this.paddle = <Paddle>(\n      this.newImageDrawable(\n        'paddle',\n        this.game.canvas.width / 2,\n        this.game.canvas.height * 0.8\n      )\n    )\n    this.block = this.newRandomBlock()\n    this.ball = <Ball>this.newImageDrawable('ball', 150, 150)\n    this.addDrawable(this.paddle, this.block, this.ball)\n\n    this.game.registerAction('a', () => this.paddle.moveLeft())\n    this.game.registerAction('d', () => this.paddle.moveRight())\n    this.game.registerAction('f', () => this.ball.fire())\n  }\n  update() {\n    this.ball.move()\n    if (this.paddle.isCollidedWith(this.ball)) {\n      const [x1, y1, w1, h1] = [\n        this.ball.x,\n        this.ball.y,\n        this.ball.w,\n        this.ball.y\n      ]\n      const [x2, y2, w2, h2] = [\n        this.paddle.x,\n        this.paddle.y,\n        this.paddle.w,\n        this.paddle.h\n      ]\n      // 判断撞击位置是paddle的上下还是左右\n      if (x1 + w1 >= x2 && (y1 <= y2 || y1 + h1 >= y2 + h2))\n        this.ball.speedY *= -1\n      if (y1 + h1 >= y2 && (x1 <= x2 || x1 + w1 >= x2 + w2))\n        this.ball.speedX *= -1\n    }\n    if (this.block.isCollidedWith(this.ball)) {\n      this.removeDrawable(this.block.uid)\n      this.block = this.newRandomBlock()\n      this.addDrawable(this.block)\n    }\n  }\n\n  // 这是一个工厂函数\n  newImageDrawable(\n    type: 'block' | 'paddle' | 'ball',\n    x: number,\n    y: number\n  ): ImageDrawable {\n    const classMap = {\n      block: Block,\n      paddle: Paddle,\n      ball: Ball\n    }\n    return new classMap[type](this, x, y, this.game.images[type])\n  }\n  newRandomBlock(): Block {\n    const x = (0.1 + 0.9 * Math.random()) * this.game.canvas.width\n    const y = (0.1 + 0.3 * Math.random()) * this.game.canvas.height\n    return <Block>this.newImageDrawable('block', x, y)\n  }\n}\n","import Game from './base/game'\nimport MainScene from './main/scene'\n;(function() {\n  const mainScene = new MainScene()\n  const game = new Game({\n    images: {\n      ball: 'ball.png',\n      block: 'block.png',\n      paddle: 'paddle.png'\n    },\n    mainScene,\n    fps: 60\n  })\n  console.log(game)\n})()\n"]}